<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hqy.cloud.message.db.mapper.FriendStateMapper">

    <select id="selectByUserId" resultType="com.hqy.cloud.message.db.entity.FriendState">
        SELECT id,user_id,friend_id,remark,`status` FROM t_im_friend_state
        WHERE user_id #{userId} AND deleted = 0
    </select>

    <resultMap id="contactsResultMap" type="com.hqy.cloud.message.bind.dto.ContactsDTO">
        <result column="unread" property="applicationUnread"/>
        <collection property="contacts" ofType="com.hqy.cloud.message.bind.dto.ContactDTO">
            <result column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="contactId" property="contactId"/>
            <result column="is_notice" property="isNotice"/>
            <result column="is_top" property="isTop"/>
            <result column="avatar" property="avatar"/>
        </collection>
    </resultMap>

    <select id="queryContactsByUserId" resultType="com.hqy.cloud.message.bind.dto.ContactDTO">
        SELECT fs.id, fs.user_id, fs.friend_id contactId, fs.is_notice, fs.is_top, us.avatar, fs.remark displayName
        FROM `t_im_friend_state` fs LEFT JOIN `t_im_user_setting` us ON fs.friend_id = us.id
        WHERE fs.user_id = #{userId} AND fs.deleted = 0
    </select>

    <select id="queryApplicationUnread" resultType="java.lang.Integer">
        SELECT COUNT(*)  FROM `t_im_friend_application` WHERE receive = #{userId} AND STATUS = 0
    </select>

    <!--<select id="selectByFriendId" resultType="com.hqy.cloud.message.db.entity.FriendState">
        SELECT id,user_id,friend_id,apply_remark,remark,`status`,created FROM t_im_friend_state
        WHERE friend_id = #{userId} AND deleted = 0
    </select>-->

    <insert id="insertOrUpdate">
        INSERT INTO t_im_friend_state
        (
        `user_id`,`friend_id`,`remark`, `is_top`, `is_notice`, `status`, `deleted`, `created`,`updated`
        ) VALUES
        <foreach collection="friendStates" item="friendState" separator=",">
        (
            #{friendState.userId},
            #{friendState.friendId},
            #{friendState.remark},
            #{friendState.top},
            #{friendState.notice},
            #{friendState.status},
            0,
            now(),
            now()
        )
        </foreach>
        ON DUPLICATE KEY UPDATE
        `status` = VALUES(`status`),
        `remark` = VALUES(`remark`),
        `is_top` = VALUES(`is_top`),
        `is_notice` = VALUES(`is_notice`),
        `deleted` = 0,
        `updated` = now()
    </insert>

    <update id="removeState">
        UPDATE `t_im_friend_state` SET deleted = 1, updated = now() WHERE user_id = #{userId} AND friend_id = #{friendId}
    </update>

    <update id="updateTopState">
        UPDATE `t_im_friend_state` SET is_top = #{status} WHERE user_id = #{userId} AND friend_id = #{contactId}
    </update>

    <update id="updateNoticeState">
        UPDATE `t_im_friend_state` SET is_notice = #{status} WHERE user_id = #{userId} AND friend_id = #{contactId}
    </update>


</mapper>
